# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/curses/all/curses.rbi
#
# curses-1.3.1
class Curses::MouseEvent
  def bstate; end
  def eid; end
  def x; end
  def y; end
  def z; end
end
module Curses
  def ESCDELAY; end
  def ESCDELAY=(arg0); end
  def TABSIZE; end
  def TABSIZE=(arg0); end
  def addch(arg0); end
  def addstr(arg0); end
  def assume_default_colors(arg0, arg1); end
  def attroff(arg0); end
  def attron(arg0); end
  def attrset(arg0); end
  def beep; end
  def bkgd(arg0); end
  def bkgdset(arg0); end
  def can_change_color?; end
  def cbreak; end
  def clear; end
  def close_screen; end
  def closed?; end
  def clrtoeol; end
  def color_content(arg0); end
  def color_pair(arg0); end
  def color_pairs; end
  def colors; end
  def cols; end
  def crmode; end
  def curs_set(arg0); end
  def def_prog_mode; end
  def delch; end
  def deleteln; end
  def doupdate; end
  def echo; end
  def erase; end
  def flash; end
  def get_char; end
  def getch; end
  def getmouse; end
  def getstr; end
  def has_colors?; end
  def inch; end
  def init_color(arg0, arg1, arg2, arg3); end
  def init_pair(arg0, arg1, arg2); end
  def init_screen; end
  def insch(arg0); end
  def insertln; end
  def keyboard_encoding; end
  def keyboard_encoding=(arg0); end
  def keyname(arg0); end
  def lines; end
  def mouseinterval(arg0); end
  def mousemask(arg0); end
  def nl; end
  def nocbreak; end
  def nocrmode; end
  def noecho; end
  def nonl; end
  def noraw; end
  def pair_content(arg0); end
  def pair_number(arg0); end
  def raw; end
  def refresh; end
  def reset_prog_mode; end
  def resize(arg0, arg1); end
  def resizeterm(arg0, arg1); end
  def scrl(arg0); end
  def self.ESCDELAY; end
  def self.ESCDELAY=(arg0); end
  def self.TABSIZE; end
  def self.TABSIZE=(arg0); end
  def self.addch(arg0); end
  def self.addstr(arg0); end
  def self.assume_default_colors(arg0, arg1); end
  def self.attroff(arg0); end
  def self.attron(arg0); end
  def self.attrset(arg0); end
  def self.beep; end
  def self.bkgd(arg0); end
  def self.bkgdset(arg0); end
  def self.can_change_color?; end
  def self.cbreak; end
  def self.clear; end
  def self.close_screen; end
  def self.closed?; end
  def self.clrtoeol; end
  def self.color_content(arg0); end
  def self.color_pair(arg0); end
  def self.color_pairs; end
  def self.colors; end
  def self.cols; end
  def self.crmode; end
  def self.curs_set(arg0); end
  def self.def_prog_mode; end
  def self.delch; end
  def self.deleteln; end
  def self.doupdate; end
  def self.echo; end
  def self.erase; end
  def self.flash; end
  def self.get_char; end
  def self.getch; end
  def self.getmouse; end
  def self.getstr; end
  def self.has_colors?; end
  def self.inch; end
  def self.init_color(arg0, arg1, arg2, arg3); end
  def self.init_pair(arg0, arg1, arg2); end
  def self.init_screen; end
  def self.insch(arg0); end
  def self.insertln; end
  def self.keyboard_encoding; end
  def self.keyboard_encoding=(arg0); end
  def self.keyname(arg0); end
  def self.lines; end
  def self.mouseinterval(arg0); end
  def self.mousemask(arg0); end
  def self.nl; end
  def self.nocbreak; end
  def self.nocrmode; end
  def self.noecho; end
  def self.nonl; end
  def self.noraw; end
  def self.pair_content(arg0); end
  def self.pair_number(arg0); end
  def self.raw; end
  def self.refresh; end
  def self.reset_prog_mode; end
  def self.resize(arg0, arg1); end
  def self.resizeterm(arg0, arg1); end
  def self.scrl(arg0); end
  def self.setpos(arg0, arg1); end
  def self.setscrreg(arg0, arg1); end
  def self.standend; end
  def self.standout; end
  def self.start_color; end
  def self.stdscr; end
  def self.terminal_encoding; end
  def self.terminal_encoding=(arg0); end
  def self.timeout=(arg0); end
  def self.unget_char(arg0); end
  def self.ungetch(arg0); end
  def self.ungetmouse(arg0); end
  def self.use_default_colors; end
  def setpos(arg0, arg1); end
  def setscrreg(arg0, arg1); end
  def standend; end
  def standout; end
  def start_color; end
  def stdscr; end
  def terminal_encoding; end
  def terminal_encoding=(arg0); end
  def timeout=(arg0); end
  def unget_char(arg0); end
  def ungetch(arg0); end
  def ungetmouse(arg0); end
  def use_default_colors; end
end
class Curses::Window < Data
  def <<(arg0); end
  def addch(arg0); end
  def addstr(arg0); end
  def attroff(arg0); end
  def attron(arg0); end
  def attrset(arg0); end
  def begx; end
  def begy; end
  def bkgd(arg0); end
  def bkgdset(arg0); end
  def box(*arg0); end
  def clear; end
  def close; end
  def clrtoeol; end
  def color_set(arg0); end
  def curx; end
  def cury; end
  def delch; end
  def deleteln; end
  def derwin(arg0, arg1, arg2, arg3); end
  def erase; end
  def get_char; end
  def getbkgd; end
  def getch; end
  def getstr; end
  def idlok(arg0); end
  def inch; end
  def initialize(arg0, arg1, arg2, arg3); end
  def insch(arg0); end
  def insertln; end
  def keypad(arg0); end
  def keypad=(arg0); end
  def line_touched?(arg0); end
  def maxx; end
  def maxy; end
  def move(arg0, arg1); end
  def move_relative(arg0, arg1); end
  def nodelay=(arg0); end
  def noutrefresh; end
  def redraw; end
  def refresh; end
  def resize(arg0, arg1); end
  def scrl(arg0); end
  def scroll; end
  def scrollok(arg0); end
  def setpos(arg0, arg1); end
  def setscrreg(arg0, arg1); end
  def standend; end
  def standout; end
  def subwin(arg0, arg1, arg2, arg3); end
  def timeout=(arg0); end
  def touch; end
  def touch_line(*arg0); end
  def touched?; end
  def untouch; end
end
class Curses::Pad < Curses::Window
  def initialize(arg0, arg1); end
  def noutrefresh(arg0, arg1, arg2, arg3, arg4, arg5); end
  def refresh(arg0, arg1, arg2, arg3, arg4, arg5); end
  def subpad(arg0, arg1, arg2, arg3); end
end
class Curses::Item < Data
  def ==(arg0); end
  def description; end
  def initialize(arg0, arg1); end
  def name; end
  def opts; end
  def opts_off(arg0); end
  def opts_on(arg0); end
  def set_opts(arg0); end
end
class Curses::Menu < Data
  def back_pattern; end
  def clear_pattern; end
  def current_item; end
  def current_item=(arg0); end
  def down_item; end
  def driver(arg0); end
  def first_item; end
  def format; end
  def initialize(arg0); end
  def item_count; end
  def items; end
  def items=(arg0); end
  def last_item; end
  def left_item; end
  def next_item; end
  def next_match; end
  def opts; end
  def opts_off(arg0); end
  def opts_on(arg0); end
  def post; end
  def prev_item; end
  def prev_match; end
  def right_item; end
  def scale; end
  def scroll_down_line; end
  def scroll_down_page; end
  def scroll_up_line; end
  def scroll_up_page; end
  def set_format(arg0, arg1); end
  def set_opts(arg0); end
  def set_sub(arg0); end
  def set_win(arg0); end
  def toggle_item; end
  def unpost; end
  def up_item; end
end
class Curses::Field < Data
  def back; end
  def back=(arg0); end
  def buffer(arg0); end
  def dynamic_height; end
  def dynamic_width; end
  def fore; end
  def fore=(arg0); end
  def height; end
  def initialize(arg0, arg1, arg2, arg3, arg4, arg5); end
  def leftcol; end
  def max; end
  def max=(arg0); end
  def nbuffers; end
  def offscreen; end
  def opts; end
  def opts_off(arg0); end
  def opts_on(arg0); end
  def set_back(arg0); end
  def set_buffer(arg0, arg1); end
  def set_fore(arg0); end
  def set_max(arg0); end
  def set_type(*arg0); end
  def toprow; end
  def width; end
end
class Curses::Form < Data
  def driver(arg0); end
  def initialize(arg0); end
  def post; end
  def scale; end
  def set_sub(arg0); end
  def set_win(arg0); end
  def unpost; end
end
